/*!
 * [react-events](https://github.com/jhudson8/react-events) v0.2.0;  MIT license; Joe Hudson<joehud_AT_gmail.com>
 */
!function(n){"function"==typeof define&&define.amd?define(["react"],n):"undefined"!=typeof exports&&"undefined"!=typeof require?module.exports=function(t){n(t)}:n(React)}(function(n){function t(n,t,o){var r=t;if("string"==typeof t&&(r=o[t]),!t)throw'no callback function exists for "'+t+'"';t=function(){return r.apply(o,arguments)};var f=n.match(i),a=f[1],u=e[a],s=f[2];if(!u)throw'no handler registered for "'+n+'"';return u.call(o,{path:s},t)}var e={},i=/^([^:]+):?(.*)/,o={standard:function(n){var t={on:n.onKey||"on",off:n.offKey||"off"},e=n.target;return function(i,o){function r(n,i){return function(){var r="function"==typeof e?e.call(i,f):e;r&&r[t[n]](f,o)}}var f=i.path;return{on:r("on",this),off:r("off",this),initialize:n.initialize}}}},r=n.events={handle:function(n,t){"function"!=typeof t&&(t=o[t.type||"standard"](t)),e[n]=t}};"undefined"!=typeof window&&r.handle("window",{target:window,onKey:"addEventListener",offKey:"removeEventListener"}),r.handle("ref",function(n,t){var e=n.path.match(i),o=e[1],r=e[2];return{on:function(){var n=this.refs[o];n&&n.on(r,t)},off:function(){var n=this.refs[o];n&&n.off(r,t)}}}),r.handle("dom",function(n,t){var e=n.path.match(i);return{on:function(){$(this.getDOMNode()).on(e[1],e[2],t)},off:function(){$(this.getDOMNode()).off(e[1],e[2],t)}}}),n.mixins.add("events",function(){function n(n,t){return function(){n.apply(t,arguments)}}var e=[{getInitialState:function(){var n=this._eventHandlers=[];if(this.events){var e;for(var i in this.events)e=t(i,this.events[i],this),e.initialize&&e.initialize.call(this),n.push(e)}return null},componentDidMount:function(){for(var n=this._eventHandlers,t=0;t<n.length;t++)n[t].on.call(this)},componentWillUnmount:function(){for(var n=this._eventHandlers,t=0;t<n.length;t++)n[t].off.call(this)}}];if(r.mixin){var i={},o={};for(var f in r.mixin)i[f]=n(r.mixin[f],o);i.getInitialState=function(){return{__events:o}},e.push(i)}return e}),n.mixins.add("triggerWith",{triggerWith:function(){var n=Array.prototype.slice.call(arguments),t=this;return function(){t.trigger.apply(this,n)}}})});