registerProject({"title":"react-events","summary":"Declarative managed event bindings for [React](#link/http%3A%2F%2Ffacebook.github.io%2Freact%2F) components\n\n* No manual event cleanup\n* All events are declared in 1 place for easier readability\n\nComponents that include the ```events``` mixin (registered with [react-mixin-manager](#link/https%3A%2F%2Fgithub.com%2Fjhudson8%2Freact-mixin-manager)) can include an ```events``` attribute to declare events that should be monitored very similar to [Backbone](#link/http%3A%2F%2Fbackbonejs.org%2F).View events.\n\nBy default, the following events are supported out of the box but custom event handlers can be included.\n\n* window events\n* DOM events (available but you should use React attributes if you can)\n* ```ref``` events (using ```on``` and ```off``` of a component identified with a particular [ref](#link/http%3A%2F%2Ffacebook.github.io%2Freact%2Fdocs%2Fmore-about-refs.html))\n* repeat events","sections":[{"body":"Event listeners are declared using the ```events``` attribute.  To add this support the ```events``` mixin ***must*** be included with your component mixins.\n```\nReact.createClass({\n  events: {\n    '{type}:{path}': (callback function or attribute name identifying a callback function)\n  },\n  mixins: ['events']\n})\n```\nThe ```type``` and ```path``` values are specific to different event handlers.","title":"Event Types","sections":[{"body":"Event signature\n```\nwindow:{window event}\n```\n\nExample\n```\nReact.createClass({\n  events: {\n    'window:scroll': 'onScroll'\n  },\n  mixins: ['events'],\n  onScroll: function() {\n    // will fire when a window scroll event has been triggered and \"this\" is the parent component\n  }\n});\n```","title":"Window","sections":[]},{"body":"Event signature\n```\n// repeat every * interval\nrepeat:{duration in millis}\n!repeat:{duration in millis}\n```\n\nExample\n```\nReact.createClass({\n  events: {\n    'repeat:3000': function() {\n      // this will be called every 3 seconds only when the component is mounted\n    },\n    '!repeat:3000': function() {\n      // same as above but will *only* be called when this web page is the active page (requestAnimationFrame)\n    },\n  },\n  mixins: ['events']\n});\n```","title":"Repeat","sections":[]},{"body":"Event signature\n```\nref:{ref name}:{event name}\n```\n\nIf you aren't familiar with ref usage, see [this](#link/http%3A%2F%2Ffacebook.github.io%2Freact%2Fdocs%2Fmore-about-refs.html).\n\nThis assumes that the component identified by the ref name implements ***on*** and ***off*** methods.  If so, specific events from that component will be caught in the parent component.\n\nExample\n```\nReact.createClass({\n  events: {\n    'ref:someComponent:something-happened': 'onSomethingHappened'\n  },\n  mixins: ['events'],\n  onSomethingHappened: function() {\n    // \"someComponent\" triggered the \"something-happened\" event and \"this\" is the parent component\n  }\n  render: function() {\n    return <div><SomeComponent ref=\"someComponent\" .../></div>;\n  }\n});\n```","title":"\"Ref\" Components","sections":[]},{"body":"*note: [jquery](#link/http%3A%2F%2Fjquery.com%2F) (or impl that supports ```$().on(eventName, elementSelector)```) is required for these events*\n\nEvent signature\n```\ndom:{DOM events separated by space}:{query path}\n```\n\nExample\n```\nReact.createClass({\n  events: {\n    'dom:click:button': 'onClick'\n  },\n  mixins: ['events'],\n  onClick: function() {\n    // will fire when the button is clicked and \"this\" is the parent component\n  }\n});\n```","title":"DOM","sections":[]}]},{"body":"When using the ```ref``` event handler, the component should support the on/off methods.  While this script does not include the implementation of that, it does provide a hook for including your own impl when the ```events``` mixin is included using ```React.events.mixin```.\n\n```\nReact.events.mixin = objectThatHasOnOffMethods;\n```\n\nIf you include [react-backbone](#link/https%3A%2F%2Fgithub.com%2Fjhudson8%2Freact-backbone) this will be set automatically for you as well as ```model``` event bindings.\n\nYou will the have the ability to do the following:\n```\nvar ChildComponent = React.createClass({\n  mixins: ['events'],\n  ...\n  onSomethingHappened: function() {\n    this.trigger('something-happened');\n  }\n});\n...\n\nvar ParentComponent = React.createClass({\n  mixins: ['events', 'modelEventBinder'],\n  events: {\n    'model:onChange': 'onModelChange',\n    'ref:myComponent:something-happened': 'onSomethingHappened'\n  },\n  render: function() {\n    return <div><ChildComponent ref=\"myComponent\"/></div>;\n  },\n  onSomethingHappened: function() { ... },\n  onModelChange: function() { ... }\n});\n```","title":"React Component Events","sections":[]},{"body":"","title":"Advanced Features","sections":[{"body":"If you need to reference ```this``` when declaring your event handler, you can use an object with a ```callback``` object.\n\n```\nvar MyClass = React.createClass({\n  mixins: ['events'],\n  events: {\n    'window:resize': {\n      callback: function() {\n        // return the callback function;  executed after the instance has been created\n        // so \"this\" can be referenced as the react component instance\n      }\n    }\n  }\n});\n```","title":"Instance References","sections":[]},{"body":"It is sometimes useful to wrap callback methods for throttling, cacheing or other purposes.  Because an instance is required for this, the previously described instance reference ```callback``` can be used but can be verbose.  Special callback wrappers can be used to accomplish this.  If the event name is prefixed with ```*someSpecialName(args):...``` the ```someSpecialName``` callback wrapper will be invoked.\n\nThis is best described with an example\n```\n  events: {\n    '*throttle(300):window:resize': 'forceUpdate'\n  }\n```\n\nWhile no special handlers are implemented by default, by including [react-backbone](#link/https%3A%2F%2Fgithub.com%2Fjhudson8%2Freact-backbone), the following special handlers are available (see [underscore](#link/http%3A%2F%2Funderscorejs.org) for more details)\n\n* memoize\n* delay\n* defer\n* throttle\n* debounce\n* once\n\nTo implement your own special handler, just reference a wrapper function by name on ```React.events.specials```.  For example:\n```\n// this will log a message whenever this callback is invoked\nReact.events.specials.log = function(callback, args) {\n  return function() {\n    console.log(args[0]);\n    callback.apply(this, arguments);\n  }\n}\n```\nWhich can be referenced with\n```\n  events: {\n    '*log(my message):...': '...';\n  }\n```","title":"Callback Wrappers","sections":[]},{"body":"All events supported by default use the same API as the custom event handler.  Using ```React.events.handle```, you can add support for a custom event handler.  This could be useful for adding an application specific global event bus for example.","title":"Custom Event Handlers","sections":[]}]}],"api":{"Mixins":{"methods":{},"packages":{"events":{"overview":"This mixin is required if you want to be able to use declaritive event definitions.\n\nIn addition, it also includes component state binding for the event handler implementation (not included).\n\nThe event handler implementation is included with [react-backbone](#link/https%3A%2F%2Fgithub.com%2Fjhudson8%2Freact-backbone) or can be specified  by setting ```React.events.mixin```.  The event handler is simply an object that contains method implementations for\n\n* trigger\n* on\n* off\n\n```\nReact.events.mixin = myObjectThatSupportsEventMethods;\n```","methods":{"trigger":{"profiles":["eventName[, parameters...]"],"params":{"eventName":"the model event name to trigger","parameters":"any event parameters to be included"},"summary":"Trigger the specified event.","dependsOn":[],"overview":""},"on":{"profiles":["eventName, callback[, context]"],"params":{"eventName":"the event name","callback":"the event callback function","context":"the callback context"},"summary":"Listen for the specific event and execute the callback function when the event is fired.","dependsOn":[],"overview":""},"once":{"profiles":["eventName, callback[, context]"],"params":{"eventName":"the event name","callback":"the event callback function","context":"the callback context"},"summary":"Listen for the specific event and execute the callback function when the event is fired ***1 time only***.","dependsOn":[],"overview":""},"off":{"profiles":["eventName, callback[, context]"],"params":{"eventName":"the event name","callback":"the event callback function","context":"the callback context"},"summary":"Remove the specified event binding.","dependsOn":[],"overview":""}}},"triggerWith":{"overview":"","methods":{"triggerWith":{"profiles":["event[, parameters...]"],"params":{"event":"the event name","parameters":"any additional parameters that should be added to the trigger"},"summary":"A convienance method which allows for easy closure binding of component event triggering when React events occur.","dependsOn":[],"overview":"```\nReact.createClass({\n  mixins: ['triggerWith'],\n  render: function() {\n\n    // when the button is clicked, the parent component will have 'button-clicked' triggered with the provided parameters\n    return <button type=\"button\" onClick={this.triggerWith('button-clicked', 'param1', 'param2')}>Click me</button>\n  }\n})\n\n```"}}}}},"API":{"methods":{},"packages":{"React.events":{"overview":"","methods":{"handle":{"profiles":["identifier, options","identifier, handler"],"params":{"identifier":"*{string or regular expression}* the event type (first part of event definition)","options":"will use a predefined \"standard\" handler;  this assumes the event format of \"{handler identifier}:{target identifier}:{event name}\"","target":"{object or function(targetIdentifier, eventName)} the target to bind/unbind from or the functions which retuns this target","onKey":"{string} the attribute which identifies the event binding function on the target (default is \"on\")","offKey":"{string} the attribute which identifies the event un-binding function on the target (default is \"off\")","handler":"{function(handlerOptions, handlerCallback)} which returns the object used as the event handler.","handlerOptions":"{object} will contain a *path* attribute - the event key (without the handler key prefix).  if the custom handler was registered as \"foo\" and events hash was { \"foo:abc\": \"...\" }, the path is \"abc\"","handlerCallback":"{function} the callback function to be bound to the event"},"summary":"For example, the following are the implementations of the event handlers provided by default:","dependsOn":[],"overview":"***window events (standard event handler type with custom on/off methods and static target)***\n```\nReact.events.handle('window', {\n  target: window,\n  onKey: 'addEventListener',\n  offKey: 'removeEventListener'\n});\n```\n\n```\n// this will match any key that starts with custom-\nReact.events.handle(/custom-.*/, function(options, callback) {\n  // if the event declaration was \"custom-foo:bar\"\n  var key = options.key;  // customm-foo\n  var path = options.path; // bar\n  ...\n}\n```\n\n***ref events (standard event handler type with dynamic target)***\n```\nReact.events.handle('ref', {\n  target: function(name) {\n    return this.refs[name];\n  }\n});\n```\n\n***DOM events (custom handler which must return an object with on/off methods)***\n```\n  React.events.handle('dom', function(options, callback) {\n    var parts = options.path.match(splitter);\n    return {\n      on: function() {\n        $(this.getDOMNode()).on(parts[1], parts[2], callback);\n      },\n      off: function() {\n        $(this.getDOMNode()).off(parts[1], parts[2], callback);\n      }\n    };\n  });\n```\n\nYou could add your own global event bus handler (assuming it supported on/off events) like the following example:\n```\nReact.events.handle('app', {\n  target: myGlobalEventHandler\n});\n```\nwhich could then be bound by your React components using\n```\n  events: {\n    'app:some-event': 'onSomeEvent'\n  }\n```"}}}}}}});
